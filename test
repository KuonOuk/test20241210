import boto3
import logging
from botocore.exceptions import ClientError

def get_all_glue_jobs():
    """
    全てのAWS Glueジョブを取得
    """
    try:
        jobs = []
        glue_client = boto3.client('glue')

        # 初回のジョブリスト取得
        response = glue_client.get_jobs()
        jobs.extend(response['Jobs'])

        # ページネーションの処理
        while 'NextToken' in response:
            response = glue_client.get_jobs(NextToken=response['NextToken'])
            jobs.extend(response['Jobs'])

        return jobs

    except ClientError as err:
        logging.error("ジョブを取得できませんでした。原因: %s: %s", err.response["Error"]["Code"], err.response["Error"]["Message"])
    except Exception as err:
        logging.error("ジョブの取得処理中にエラーが発生しました: %s", err)
    return []


def get_all_job_runs(job_name):
    """
    指定されたAWS Glueジョブの全履歴を取得
    """
    try:
        job_runs = []
        glue_client = boto3.client('glue')

        # 初回のジョブ履歴取得
        response = glue_client.get_job_runs(JobName=job_name)
        job_runs.extend(response['JobRuns'])

        # ページネーションの処理
        while 'NextToken' in response:
            response = glue_client.get_job_runs(JobName=job_name, NextToken=response['NextToken'])
            job_runs.extend(response['JobRuns'])

        return job_runs

    except ClientError as err:
        logging.error("ジョブ履歴を取得できませんでした。原因: %s: %s", err.response["Error"]["Code"], err.response["Error"]["Message"])
    except Exception as err:
        logging.error("ジョブ履歴の取得処理中にエラーが発生しました: %s", err)
    return []


def calculate_max_concurrent_jobs(job_runs):
    """
    同時実行ジョブ数の最大値を計算
    """
    job_runs.sort(key=lambda x: x['StartedOn'])

    max_concurrent_jobs = 0
    current_jobs = 0
    events = []

    for run in job_runs:
        events.append((run['StartedOn'], 1))  # 開始イベント
        events.append((run['CompletedOn'], -1))  # 終了イベント

    events.sort(key=lambda x: x[0])

    for event in events:
        current_jobs += event[1]
        max_concurrent_jobs = max(max_concurrent_jobs, current_jobs)

    return max_concurrent_jobs


def get_account_max_concurrent_jobs_and_details():
    """
    アカウント全体で同時実行されたジョブの最大数とその詳細を取得
    """
    all_jobs = get_all_glue_jobs()
    combined_job_runs = []

    for job in all_jobs:
        job_name = job['Name']  # 必要に応じてキーを変更
        job_runs = get_all_job_runs(job_name)
        for run in job_runs:
            if 'StartedOn' in run and 'CompletedOn' in run:
                combined_job_runs.append({
                    'start': run['StartedOn'],
                    'end': run['CompletedOn'],
                    'job_name': job_name
                })

    # 同時実行ジョブ数の計算
    combined_job_runs.sort(key=lambda x: x['start'])
    max_concurrent_jobs = 0
    current_jobs = []
    events = []

    for run in combined_job_runs:
        events.append((run['start'], 1, run['job_name']))  # 開始イベント
        events.append((run['end'], -1, run['job_name']))  # 終了イベント

    events.sort(key=lambda x: x[0])

    for event in events:
        if event[1] == 1:  # 開始イベント
            current_jobs.append(event[2])
        else:  # 終了イベント
            current_jobs.remove(event[2])

        if len(current_jobs) > max_concurrent_jobs:
            max_concurrent_jobs = len(current_jobs)
            max_concurrent_job_names = current_jobs.copy()

    return max_concurrent_jobs, max_concurrent_job_names


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    # アカウント全体の同時実行ジョブの最大数と詳細
    max_concurrent_jobs, max_concurrent_job_names = get_account_max_concurrent_jobs_and_details()
    print(f"アカウント全体で同時に実行されたジョブの最大数: {max_concurrent_jobs}")
    print(f"その時実行されていたジョブ: {max_concurrent_job_names}")
