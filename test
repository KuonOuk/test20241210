import os
import boto3
import csv
import logging
from botocore.exceptions import ClientError
import re

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

REGION = "ap-northeast-1"
ACCOUNT_ID = "5555"

qs_client = boto3.client("quicksight", region_name=REGION)


def delete_folders(folder_name, folder_id):
    """フォルダを削除"""
    try:
        qs_client.delete_folder(AwsAccountId=ACCOUNT_ID, FolderId=folder_id)
        logging.info("フォルダを削除成功: %s (フォルダID: %s)", folder_name, folder_id)
        return True
    except ClientError as err:
        error_code = err.response["Error"]["Code"]
        if error_code == "PreconditionNotMetException":
            logging.error("フォルダの削除に失敗しました。原因：%s: %s", error_code, err.response["Error"]["Message"])
            return False  # 削除処理をスキップして次回ループで再試行
        elif error_code == "ResourceNotFoundException":
            logging.error("フォルダの削除に失敗しました。原因：%s: %s", error_code, err.response["Error"]["Message"])
            return None  # 削除済みとして次回ループで対象外にする
        else:
            logging.error("フォルダの削除に失敗しました。原因：%s: %s", error_code, err.response["Error"]["Message"])
    except Exception as err:
        logging.error("フォルダの削除に失敗しました: %s", err)
    return False


def main():
    # CSVファイルパス
    list_folders_csv = "delete_folders_list.csv"
    script_dir = os.path.dirname(os.path.abspath(__file__))
    list_folders_csv_path = os.path.join(script_dir, list_folders_csv)

    # キーワード
    env_keyword = "testing"
    keyword = rf"k3g-ry-{env_keyword}[-\w\s]*$"

    try:
        folder_ids_to_skip = set()  # 削除済みまたは対象外フォルダを追跡

        while True:  # 削除可能なフォルダがなくなるまでループ
            deleted_any = False  # フォルダが削除されたかどうかを追跡

            # CSV ファイルを読み込む
            with open(list_folders_csv_path, mode="r") as file:
                reader = csv.DictReader(file)
                rows = list(reader)

                if not rows:
                    logging.info("CSV ファイルにフォルダが存在しません。削除処理を中断します。")
                    return

                # CSV からすべての FolderId を抽出
                folder_ids = [row["FolderId"] for row in rows if row["FolderId"] not in folder_ids_to_skip]

                # フォルダを処理
                for row in rows:
                    folder_id = row["FolderId"]
                    folder_name = row["Name"]

                    # フォルダが既にスキップ対象の場合は処理しない
                    if folder_id in folder_ids_to_skip:
                        continue

                    # キーワードが FolderId または Name に含まれているか確認
                    if re.search(keyword, folder_id) or re.search(keyword, folder_name):
                        try:
                            # フォルダ削除処理
                            delete_result = delete_folders(folder_name, folder_id)
                            if delete_result is True:
                                deleted_any = True  # 削除が成功したことを記録
                                folder_ids_to_skip.add(folder_id)  # 削除済みフォルダをスキップ対象に追加
                            elif delete_result is None:
                                folder_ids_to_skip.add(folder_id)  # 削除済み（ResourceNotFound）フォルダをスキップ対象に追加
                            else:
                                logging.info(f"フォルダ {folder_name} (フォルダID: {folder_id}) は削除不可。依存関係があります。")
                        except ClientError as err:
                            logging.error("フォルダ詳細情報の取得に失敗しました: %s", err.response["Error"]["Message"])
                        except Exception as err:
                            logging.error("予期しないエラーが発生しました: %s", err)
                    else:
                        logging.info("キーワードに一致しないフォルダ: %s (フォルダID: %s)", folder_name, folder_id)

            # ループ終了条件
            if not deleted_any:
                logging.info("削除可能なフォルダがなくなりました。削除処理を終了します。")
                break

    except FileNotFoundError as err:
        logging.error("ファイルが見つかりません: %s", err)
    except Exception as err:
        logging.error("フォルダ削除処理中にエラーが発生しました: %s", err)

    logging.info("全ての処理が完了しました。")


if __name__ == "__main__":
    main()
