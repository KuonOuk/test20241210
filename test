import boto3
import logging
from botocore.exceptions import ClientError


def get_all_glue_jobs():
    """
    全てのAWS Glueジョブを取得
    """
    try:
        jobs = []
        glue_client = boto3.client('glue')

        # 初回のジョブリスト取得
        response = glue_client.get_jobs()
        jobs.extend(response['Jobs'])

        # ページネーションの処理
        while 'NextToken' in response:
            response = glue_client.get_jobs(NextToken=response['NextToken'])
            jobs.extend(response['Jobs'])

        return jobs

    except ClientError as err:
        logging.error("ジョブを取得できませんでした。原因: %s: %s", err.response["Error"]["Code"], err.response["Error"]["Message"])
    except Exception as err:
        logging.error("ジョブの取得処理中にエラーが発生しました: %s", err)
    return []


def get_all_job_runs(job_name):
    """
    指定されたAWS Glueジョブの全履歴を取得
    """
    try:
        job_runs = []
        glue_client = boto3.client('glue')

        # 初回のジョブ履歴取得
        response = glue_client.get_job_runs(JobName=job_name)
        job_runs.extend(response['JobRuns'])

        # ページネーションの処理
        while 'NextToken' in response:
            response = glue_client.get_job_runs(JobName=job_name, NextToken=response['NextToken'])
            job_runs.extend(response['JobRuns'])

        return job_runs

    except ClientError as err:
        logging.error("ジョブ履歴を取得できませんでした。原因: %s: %s", err.response["Error"]["Code"], err.response["Error"]["Message"])
    except Exception as err:
        logging.error("ジョブ履歴の取得処理中にエラーが発生しました: %s", err)
    return []


def calculate_max_concurrent_jobs(job_runs):
    """
    同時実行ジョブ数の最大値を計算
    """
    job_runs.sort(key=lambda x: x['StartedOn'])

    max_concurrent_jobs = 0
    current_jobs = 0
    events = []

    for run in job_runs:
        events.append((run['StartedOn'], 1))  # 開始イベント
        events.append((run['CompletedOn'], -1))  # 終了イベント

    events.sort(key=lambda x: x[0])

    for event in events:
        current_jobs += event[1]
        max_concurrent_jobs = max(max_concurrent_jobs, current_jobs)

    return max_concurrent_jobs


def get_account_max_concurrent_jobs():
    """
    アカウント全体で同時実行されたジョブの最大数を取得
    """
    all_jobs = get_all_glue_jobs()
    combined_job_runs = []

    for job in all_jobs:
        job_name = job['Name']  # 必要に応じてキーを変更
        job_runs = get_all_job_runs(job_name)
        for run in job_runs:
            if 'StartedOn' in run and 'CompletedOn' in run:
                combined_job_runs.append({'start': run['StartedOn'], 'end': run['CompletedOn']})

    # 全ジョブの履歴をまとめて最大同時実行数を計算
    return calculate_max_concurrent_jobs(combined_job_runs)


def get_all_jobs_max_concurrent_jobs():
    """
    全てのジョブにおける同時実行ジョブの最大数を取得
    """
    all_jobs = get_all_glue_jobs()
    max_concurrent_jobs = 0
    max_concurrent_job_name = None

    for job in all_jobs:
        job_name = job['Name']
        job_runs = get_all_job_runs(job_name)
        if not job_runs:
            continue

        # 各ジョブの同時実行数を計算
        concurrent_jobs = calculate_max_concurrent_jobs(job_runs)
        if concurrent_jobs > max_concurrent_jobs:
            max_concurrent_jobs = concurrent_jobs
            max_concurrent_job_name = job_name

    return max_concurrent_job_name, max_concurrent_jobs


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)

    # アカウント全体の同時実行ジョブの最大数
    max_concurrent_jobs = get_account_max_concurrent_jobs()
    print(f"アカウント全体で同時実行ジョブの最大数: {max_concurrent_jobs}")

    # 全ジョブの中で同時実行ジョブの最大数を持つジョブ
    job_with_max_concurrent_runs, max_job_concurrent_runs = get_all_jobs_max_concurrent_jobs()
    print(f"最も同時実行ジョブ数が多いジョブ: {job_with_max_concurrent_runs}")
    print(f"そのジョブの同時実行ジョブの最大数: {max_job_concurrent_runs}")
