import os
import boto3
import csv
import logging
from botocore.exceptions import ClientError
import re

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

REGION = "ap-northeast-1"
ACCOUNT_ID = "5555"

qs_client = boto3.client("quicksight", region_name=REGION)


def delete_folders(folder_name, folder_id):
    """フォルダを削除"""
    try:
        qs_client.delete_folder(AwsAccountId=ACCOUNT_ID, FolderId=folder_id)
        logging.info("フォルダを削除成功: %s (フォルダID: %s)", folder_name, folder_id)
    except ClientError as err:
        logging.error("フォルダの削除に失敗しました。原因: %s: %s", err.response["Error"]["Code"], err.response["Error"]["Message"])
    except Exception as err:
        logging.error("フォルダの削除に失敗しました: %s", err)


def main():
    # CSVファイルパス
    list_folders_csv = "delete_folders_list.csv"
    script_dir = os.path.dirname(os.path.abspath(__file__))
    list_folders_csv_path = os.path.join(script_dir, list_folders_csv)

    # キーワード
    env_keyword = "testing"
    keyword = rf"k3g-ry-{env_keyword}[-\w\s]*$"

    try:
        while True:  # 削除可能なフォルダがなくなるまでループ
            deleted_any = False  # フォルダが削除されたかどうかを追跡

            # CSV ファイルを読み込む
            with open(list_folders_csv_path, mode="r") as file:
                reader = csv.DictReader(file)
                rows = list(reader)

                if not rows:
                    logging.info("CSV ファイルにフォルダが存在しません。削除処理を中断します。")
                    return

                # CSV からすべての FolderId を抽出
                folder_ids = [row["FolderId"] for row in rows]

                # フォルダを処理
                for row in rows:
                    folder_id = row["FolderId"]
                    folder_name = row["Name"]

                    # キーワードが FolderId または Name に含まれているか確認
                    if re.search(keyword, folder_id) or re.search(keyword, folder_name):
                        folder_arn = f"arn:aws:quicksight:{REGION}:{ACCOUNT_ID}:folder/{folder_id}"

                        try:
                            # フォルダ詳細を取得
                            response = qs_client.describe_folder(AwsAccountId=ACCOUNT_ID, FolderId=folder_id)
                            folder_details = response.get("Folder", {})
                            folder_path = folder_details.get("FolderPath", [])

                            # FolderPath の中に対象フォルダが含まれる場合は削除不可
                            is_deletable = True
                            for ancestor_arn in folder_path:
                                ancestor_id = ancestor_arn.split('/')[-1]
                                if ancestor_id in folder_ids:
                                    is_deletable = False
                                    break

                            # 削除可能な場合のみ削除
                            if is_deletable:
                                delete_folders(folder_name, folder_id)
                                deleted_any = True  # フォルダ削除が実行されたことを記録
                            else:
                                logging.info(f"削除スキップ: %s (フォルダID: %s)", folder_name, folder_id)

                        except ClientError as err:
                            logging.error("フォルダ詳細情報の取得に失敗しました: %s", err.response["Error"]["Message"])
                        except Exception as err:
                            logging.error("予期しないエラーが発生しました: %s", err)
                    else:
                        logging.info("キーワードに一致しないフォルダ: %s (フォルダID: %s)", folder_name, folder_id)

            # ループ終了条件
            if not deleted_any:
                logging.info("依存関係が解消されたフォルダがなくなりました。削除処理を終了します。")
                break

    except FileNotFoundError as err:
        logging.error("ファイルが見つかりません: %s", err)
    except Exception as err:
        logging.error("フォルダ削除処理中にエラーが発生しました: %s", err)

    logging.info("全ての処理が完了しました。")


if __name__ == "__main__":
    main()
